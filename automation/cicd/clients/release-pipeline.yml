trigger: none

parameters:
  - name: env 
    displayName: Environment
    type: string
    default: dev 
    values: 
      - dev 
      # - test 
      # - prod 

  - name: apis
    displayName: APIs
    type: object
    default:
      - productsC 
      - productsQ
      - productsBootstrap
      - reviewsC
      - reviewsQ
      - reviewsBootstrapper
      - votesC
      - votesQ
      - votesBootstrap

  - name: minReplicas 
    displayName: Min Replicas
    type: number
    default: 0 

  - name: maxReplicas 
    displayName: Max Replicas
    type: number
    default: 2 

  - name: isCreateRelease
    displayName: Create Release 
    type: boolean
    default: false
    values:
      - true
      - false

  - name: isDeployRelease
    displayName: Deploy Release 
    type: boolean
    default: false
    values:
      - true
      - false

  - name: isIntegrationTests
    displayName: Run Integration Tests 
    type: boolean
    default: false
    values:
      - true
      - false

resources:
  repositories:
  - repository: pipeline
    type: git
    ref: refs/heads/master
    name: automation

pool:
  vmImage: ubuntu-latest

variables:
  - template: cicd/templates/variables/global.yml@pipeline

stages:
  - ${{ if eq(parameters.isCreateRelease, true) }}: 
    - ${{ each api in parameters.apis }}:
      - template: cicd/templates/stages/build.yml@pipeline
        parameters:
          repo: ${{ api }} 
          branch: main 
          env: ${{ parameters.env }}
          isFeatureBranch: false
          isJava :  ${{ or(startsWith(api, 'products'), startsWith(api, 'votes'))}}
          isDotnet : ${{ startsWith(api,'reviews')}}

  - ${{ if eq(parameters.isDeployRelease, true) }}: 
    - ${{ each api in parameters.apis }}:
      - template: cicd/templates/stages/deploy.yml@pipeline
        parameters:
          repo: ${{ api }} 
          branch: main 
          env: ${{ parameters.env }}
          minReplicas: ${{ parameters.minReplicas }}
          maxReplicas: ${{ parameters.maxReplicas }}

  - ${{ if eq(parameters.isIntegrationTests, true) }}: 
    - template: cicd/templates/stages/integration-tests.yml@pipeline
      parameters:
        env: ${{ parameters.env }} 